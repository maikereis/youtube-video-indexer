services:
  valkey:
    image: valkey/valkey:8.1.1-alpine
    env_file: .env
    ports:
      - ${VALKEY_PORT}:6379
    environment:
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
    command: sh -c "valkey-server --requirepass \"$VALKEY_PASSWORD\""
    networks:
      - local
    volumes:
      - queue-data:/data
    restart: unless-stopped

  mongo:
    image: mongo:8.0
    env_file: .env
    logging:
      options:
        max-size: 1g
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - mongo-data:/data/db
      - ./init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    networks:
      - local
    restart: always

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    env_file: .env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - ${ELASTIC_PORT}:9200
      - 9300:9300
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
        test: curl -s http://localhost:$ELASTIC_PORT/_cluster/health | grep -q '"status"' || exit 1
        interval: 30s
        timeout: 10s
        retries: 5
    networks:
      - local
    restart: unless-stopped

  api:
    build: 
      context: .
      dockerfile: docker/app.Dockerfile
    env_file: .env
    ports:
      - "8080:8000"
    environment:
      - VALKEY_HOST=valkey
      - VALKEY_PORT=${VALKEY_PORT}
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
    networks:
      - local

  indexer:
    build: 
      context: .
      dockerfile: docker/indexer.Dockerfile
    env_file: .env  
    environment:
      - ELASTIC_INDEX_NAME=videos
      - ELASTIC_HOST=elastic
      - ELASTIC_PORT=${ELASTIC_PORT}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SCHEME=http
      - MONGO_NAME=mongo
      - MONGO_HOST=mongo
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - VALKEY_HOST=valkey
      - VALKEY_PORT=${VALKEY_PORT}
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
    depends_on:
      mongo:
        condition: service_started
      valkey:
        condition: service_started
      elastic:
        condition: service_started
    networks:
      - local

  worker:
    build: 
      context: .
      dockerfile: docker/worker.Dockerfile
    env_file: .env
    environment:
      - VALKEY_HOST=valkey
      - VALKEY_PORT=${VALKEY_PORT}
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
    depends_on:
      valkey:
        condition: service_started
    networks:
      - local

volumes:
  queue-data:
  mongo-data:
  elasticsearch-data:

networks:
  local:
    driver: bridge